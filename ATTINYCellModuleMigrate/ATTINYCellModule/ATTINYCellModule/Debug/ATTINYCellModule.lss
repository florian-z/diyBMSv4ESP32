
ATTINYCellModule.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a9a  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083c  00000000  00000000  00000d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000457  00000000  00000000  00001546  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000019a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a9  00000000  00000000  00001a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000032d  00000000  00000000  00001ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000021ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>
  26:	12 c0       	rjmp	.+36     	; 0x4c <__bad_interrupt>
  28:	11 c0       	rjmp	.+34     	; 0x4c <__bad_interrupt>
  2a:	10 c0       	rjmp	.+32     	; 0x4c <__bad_interrupt>
  2c:	0f c0       	rjmp	.+30     	; 0x4c <__bad_interrupt>
  2e:	0e c0       	rjmp	.+28     	; 0x4c <__bad_interrupt>
  30:	0d c0       	rjmp	.+26     	; 0x4c <__bad_interrupt>
  32:	0c c0       	rjmp	.+24     	; 0x4c <__bad_interrupt>
  34:	0b c0       	rjmp	.+22     	; 0x4c <__bad_interrupt>
  36:	0a c0       	rjmp	.+20     	; 0x4c <__bad_interrupt>
  38:	09 c0       	rjmp	.+18     	; 0x4c <__bad_interrupt>
  3a:	08 c0       	rjmp	.+16     	; 0x4c <__bad_interrupt>

0000003c <__ctors_end>:
  3c:	11 24       	eor	r1, r1
  3e:	1f be       	out	0x3f, r1	; 63
  40:	cf ef       	ldi	r28, 0xFF	; 255
  42:	d2 e0       	ldi	r29, 0x02	; 2
  44:	de bf       	out	0x3e, r29	; 62
  46:	cd bf       	out	0x3d, r28	; 61
  48:	8e d0       	rcall	.+284    	; 0x166 <main>
  4a:	8f c0       	rjmp	.+286    	; 0x16a <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <setup>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  4e:	88 ed       	ldi	r24, 0xD8	; 216
  50:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7fe071>
  54:	82 e0       	ldi	r24, 0x02	; 2
  56:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7fe073>
  5a:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__TEXT_REGION_LENGTH__+0x7fe063>
  5e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7fe062>
  62:	8a b3       	in	r24, 0x1a	; 26
  64:	82 6c       	ori	r24, 0xC2	; 194
  66:	8a bb       	out	0x1a, r24	; 26
  68:	87 b3       	in	r24, 0x17	; 23
  6a:	84 60       	ori	r24, 0x04	; 4
  6c:	87 bb       	out	0x17, r24	; 23
  6e:	08 95       	ret

00000070 <init_adc>:
#define ADMUXA_ADC_BATT ADMUXA_ADC3
#define ADMUXA_ADC_TEMP1 ADMUXA_ADC4
#define ADMUXA_ADC_TEMP2 ADMUXA_ADC5

void init_adc() {  
  REFVOLT_ON;
  70:	8b b3       	in	r24, 0x1b	; 27
  72:	80 68       	ori	r24, 0x80	; 128
  74:	8b bb       	out	0x1b, r24	; 27
  // todo wait until AREF stabilizes
  ADCSRA |= _BV(ADEN); // activate ADC module
  76:	85 b1       	in	r24, 0x05	; 5
  78:	80 68       	ori	r24, 0x80	; 128
  7a:	85 b9       	out	0x05, r24	; 5
  ADMUXB = 0b10000000; // use ext AREF, GAIN=1;
  7c:	80 e8       	ldi	r24, 0x80	; 128
  7e:	88 b9       	out	0x08, r24	; 8
  ADMUXA = ADMUXA_ADC_BATT; // select BATT voltage
  80:	81 e1       	ldi	r24, 0x11	; 17
  82:	89 b9       	out	0x09, r24	; 9

  DIDR0 |= _BV(ADC0D) | _BV(ADC3D) | _BV(ADC4D) | _BV(ADC5D); // disable digital input pin function on analog input pins
  84:	e0 e6       	ldi	r30, 0x60	; 96
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	89 63       	ori	r24, 0x39	; 57
  8c:	80 83       	st	Z, r24

  ADCSRA |= 0x03; // prescaler 128
  8e:	85 b1       	in	r24, 0x05	; 5
  90:	83 60       	ori	r24, 0x03	; 3
  92:	85 b9       	out	0x05, r24	; 5
  //ADCSRA |= _BV(ADATE); // free running
  //ADCSRA |= _BV(ADIE); // interrupt enable
  ADCSRA |= 0x04; // adc prescaler clk/16
  94:	85 b1       	in	r24, 0x05	; 5
  96:	84 60       	ori	r24, 0x04	; 4
  98:	85 b9       	out	0x05, r24	; 5
  ADCSRA |= _BV(ADSC); // start conversion
  9a:	85 b1       	in	r24, 0x05	; 5
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	85 b9       	out	0x05, r24	; 5
  a0:	08 95       	ret

000000a2 <loop_test_adc>:
}

void loop_test_adc() {
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	2a 97       	sbiw	r28, 0x0a	; 10
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	f8 94       	cli
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	cd bf       	out	0x3d, r28	; 61
  LED_BLU_ON
  b6:	8b b3       	in	r24, 0x1b	; 27
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	8b bb       	out	0x1b, r24	; 27
  uint16_t adc_result = 0;
  
  init_adc();
  bc:	d9 df       	rcall	.-78     	; 0x70 <init_adc>

  ADCSRA |= _BV(ADSC); // start conversion
  be:	85 b1       	in	r24, 0x05	; 5
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	85 b9       	out	0x05, r24	; 5
  while(!(ADCSRA & _BV(ADIF))); // wait for adc complete flag
  c4:	2c 9b       	sbis	0x05, 4	; 5
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <loop_test_adc+0x22>
  ADCSRA |= _BV(ADIF); // clear adc complete flag
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	80 61       	ori	r24, 0x10	; 16
  cc:	85 b9       	out	0x05, r24	; 5
  adc_result = ADCL;
  ce:	26 b1       	in	r18, 0x06	; 6
  adc_result |= ADCH<<8;
  d0:	87 b1       	in	r24, 0x07	; 7
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	98 2f       	mov	r25, r24
  d6:	88 27       	eor	r24, r24
  d8:	82 2b       	or	r24, r18
  volatile uint16_t adc1 = adc_result;
  da:	9a 83       	std	Y+2, r25	; 0x02
  dc:	89 83       	std	Y+1, r24	; 0x01

  ADCSRA |= _BV(ADSC); // start conversion
  de:	85 b1       	in	r24, 0x05	; 5
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	85 b9       	out	0x05, r24	; 5
  while(!(ADCSRA & _BV(ADIF))); // wait for adc complete flag
  e4:	2c 9b       	sbis	0x05, 4	; 5
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <loop_test_adc+0x42>
  ADCSRA |= _BV(ADIF); // clear adc complete flag
  e8:	85 b1       	in	r24, 0x05	; 5
  ea:	80 61       	ori	r24, 0x10	; 16
  ec:	85 b9       	out	0x05, r24	; 5
  adc_result = ADCL;
  ee:	26 b1       	in	r18, 0x06	; 6
  adc_result |= ADCH<<8;
  f0:	87 b1       	in	r24, 0x07	; 7
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	98 2f       	mov	r25, r24
  f6:	88 27       	eor	r24, r24
  f8:	82 2b       	or	r24, r18
  volatile uint16_t adc2 = adc_result;
  fa:	9c 83       	std	Y+4, r25	; 0x04
  fc:	8b 83       	std	Y+3, r24	; 0x03

  ADCSRA |= _BV(ADSC); // start conversion
  fe:	85 b1       	in	r24, 0x05	; 5
 100:	80 64       	ori	r24, 0x40	; 64
 102:	85 b9       	out	0x05, r24	; 5
  while(!(ADCSRA & _BV(ADIF))); // wait for adc complete flag
 104:	2c 9b       	sbis	0x05, 4	; 5
 106:	fe cf       	rjmp	.-4      	; 0x104 <loop_test_adc+0x62>
  ADCSRA |= _BV(ADIF); // clear adc complete flag
 108:	85 b1       	in	r24, 0x05	; 5
 10a:	80 61       	ori	r24, 0x10	; 16
 10c:	85 b9       	out	0x05, r24	; 5
  adc_result = ADCL;
 10e:	26 b1       	in	r18, 0x06	; 6
  adc_result |= ADCH<<8;
 110:	87 b1       	in	r24, 0x07	; 7
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	98 2f       	mov	r25, r24
 116:	88 27       	eor	r24, r24
 118:	82 2b       	or	r24, r18
  volatile uint16_t adc3 = adc_result;
 11a:	9e 83       	std	Y+6, r25	; 0x06
 11c:	8d 83       	std	Y+5, r24	; 0x05

  ADCSRA |= _BV(ADSC); // start conversion
 11e:	85 b1       	in	r24, 0x05	; 5
 120:	80 64       	ori	r24, 0x40	; 64
 122:	85 b9       	out	0x05, r24	; 5
  while(!(ADCSRA & _BV(ADIF))); // wait for adc complete flag
 124:	2c 9b       	sbis	0x05, 4	; 5
 126:	fe cf       	rjmp	.-4      	; 0x124 <loop_test_adc+0x82>
  ADCSRA |= _BV(ADIF); // clear adc complete flag
 128:	85 b1       	in	r24, 0x05	; 5
 12a:	80 61       	ori	r24, 0x10	; 16
 12c:	85 b9       	out	0x05, r24	; 5
  adc_result = ADCL;
 12e:	26 b1       	in	r18, 0x06	; 6
  adc_result |= ADCH<<8;
 130:	87 b1       	in	r24, 0x07	; 7
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	98 2f       	mov	r25, r24
 136:	88 27       	eor	r24, r24
 138:	82 2b       	or	r24, r18
  volatile uint16_t adc4 = adc_result;
 13a:	98 87       	std	Y+8, r25	; 0x08
 13c:	8f 83       	std	Y+7, r24	; 0x07

  ADCSRA |= _BV(ADSC); // start conversion
 13e:	85 b1       	in	r24, 0x05	; 5
 140:	80 64       	ori	r24, 0x40	; 64
 142:	85 b9       	out	0x05, r24	; 5
  while(!(ADCSRA & _BV(ADIF))); // wait for adc complete flag
 144:	2c 9b       	sbis	0x05, 4	; 5
 146:	fe cf       	rjmp	.-4      	; 0x144 <loop_test_adc+0xa2>
  ADCSRA |= _BV(ADIF); // clear adc complete flag
 148:	85 b1       	in	r24, 0x05	; 5
 14a:	80 61       	ori	r24, 0x10	; 16
 14c:	85 b9       	out	0x05, r24	; 5
  adc_result = ADCL;
 14e:	26 b1       	in	r18, 0x06	; 6
  adc_result |= ADCH<<8;
 150:	87 b1       	in	r24, 0x07	; 7
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	98 2f       	mov	r25, r24
 156:	88 27       	eor	r24, r24
 158:	82 2b       	or	r24, r18
  volatile uint16_t adc5 = adc_result;
 15a:	9a 87       	std	Y+10, r25	; 0x0a
 15c:	89 87       	std	Y+9, r24	; 0x09

  LED_RED_ON;
 15e:	88 b3       	in	r24, 0x18	; 24
 160:	84 60       	ori	r24, 0x04	; 4
 162:	88 bb       	out	0x18, r24	; 24
 164:	ff cf       	rjmp	.-2      	; 0x164 <loop_test_adc+0xc2>

00000166 <main>:
void setup();
void loop_test_blinky();
void loop_test_adc();

int main(void) {
  setup();
 166:	73 df       	rcall	.-282    	; 0x4e <setup>
  while(1) {
    loop_test_adc();
 168:	9c df       	rcall	.-200    	; 0xa2 <loop_test_adc>

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
